enclave {
  include "time.h"
  include "sgx_tseal.h"
  include "../utils/headers/rights.hpp"
  include "../Enclave/utils/headers/encryption/aes_gcm.hpp"
  include "../Enclave/utils/headers/uuid.hpp"

  trusted {
    /************************ Control Plane related ECALLS ************************/
    public int sgx_new_user_keys([out] sgx_ec256_public_t *pk_u, [out] sgx_ec256_private_t *sk_u);

    public int sgx_new_filesystem([in, string] const char *content_dir, [in, string] const char* meta_dir, [in, string] const char *audit_dir);
    public int sgx_load_filesystem([in, size=rk_sealed_size] const sgx_sealed_data_t* rk_sealed_data, size_t rk_sealed_size,
                  [in, size=ark_sealed_size] const sgx_sealed_data_t* ark_sealed_data, size_t ark_sealed_size,
                  [in, size=e_supernode_size] const uint8_t *e_supernode, size_t e_supernode_size,
                  [in, string] const char *content_dir, [in, string] const char* meta_dir, [in, string] const char *audit_dir);
    public int sgx_destroy_filesystem([in, string] const char *rk_path, [in, string] const char *ark_path);


    public int sgx_login([in] const sgx_ec256_private_t *sk_u, [in] const lauxus_uuid_t *u_uuid);


    public int sgx_add_user([in, string] const char *username, [in] const sgx_ec256_public_t *pk_u, [out] lauxus_uuid_t *u_uuid);
    public int sgx_remove_user([in] const lauxus_uuid_t *u_uuid);
    public int sgx_edit_user_entitlement([in, string] const char *path, lauxus_right_t rights, [in] const lauxus_uuid_t *u_uuid);


    /*********************** Data Plane related ECALLS ***********************/
    public int sgx_get_user_entitlement([in, string] const char *path, [out] lauxus_right_t *rights);

    public int sgx_ls_buffer_size([in, string] const char *path);
    public int sgx_readdir([in, string] const char *path, char separator, size_t buffer_size, [out, size=buffer_size] char *buffer);

    public int sgx_entry_type([in, string] const char *path);
    public int sgx_get_times([in, string] const char *path, [out] time_t *atime, [out] time_t *mtime, [out] time_t *ctime);

    public int sgx_file_size([in, string] const char *filepath);
    public int sgx_open_file([in, string] const char *filepath, lauxus_right_t asked_rights);
    public int sgx_close_file([in, string] const char *filepath);
    public int sgx_create_file([in, string] const char *reason, [in, string] const char *filepath);
    public int sgx_read_file([in, string] const char *reason, [in, string] const char *filepath, long offset, size_t buffer_size, [out, size=buffer_size] uint8_t *buffer);
    public int sgx_write_file([in, string] const char *reason, [in, string] const char *filepath, long offset, size_t data_size, [in, size=data_size] const uint8_t *data);
    public int sgx_truncate_file([in, string] const char *filepath);
    public int sgx_unlink([in, string] const char *reason, [in, string] const char *filepath);

    public int sgx_mkdir([in, string] const char *reason, [in, string] const char *dirpath);
    public int sgx_rmdir([in, string] const char *reason, [in, string] const char *dirpath);
  };

  untrusted {
    void ocall_print([in, string] const char *str);

    int ocall_get_current_time([out] time_t *atime);

    int ocall_dump([in, string] const char *path, size_t size, [in, size=size] const uint8_t *content);
    int ocall_dump_in_dir([in, string] const char *dir, [in] const lauxus_uuid_t *n_uuid, size_t size, [in, size=size] const uint8_t *content);
    int ocall_dump_append_in_dir([in, string] const char *dir, [in] const lauxus_uuid_t *n_uuid, size_t size, [in, size=size] const uint8_t *content);
    int ocall_dump_with_offset_in_dir([in, string] const char *dir, [in] const lauxus_uuid_t *n_uuid, long offset, size_t size, [in, size=size] const uint8_t *content);

    int ocall_load_file([in, string] const char *dir, [in] const lauxus_uuid_t *n_uuid, long offset, size_t size, [out, size=size] uint8_t *content);

    int ocall_file_size([in, string] const char *dir, [in] const lauxus_uuid_t *n_uuid);

    int ocall_delete_from_dir([in, string] const char *dir, [in] const lauxus_uuid_t *n_uuid);
  };
};
