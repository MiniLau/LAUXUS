enclave {
    from "Sealing/Sealing.edl" import *;

    trusted {
        /* define ECALLs here. */
        public int sgx_init_new_filesystem([in, string] const char *supernode_path);
        public void sgx_init_dumping_folders([in, string] const char *content_dir, [in, string] const char* meta_dir, [in, string] const char *audit_dir);
        public int sgx_init_existing_filesystem(size_t rk_sealed_size, [in, size=rk_sealed_size] const char *sealed_rk,
                                                size_t ark_sealed_size, [in, size=ark_sealed_size] const char *sealed_ark);
        public int sgx_destroy_filesystem([in, string] const char *rk_path, [in, string] const char *ark_path, [in, string] const char *supernode_path);

        public int sgx_login([in, string] const char *sk_path, [in, string] const char *user_uuid, [in, string] const char *supernode_path);
        public int sgx_sign_message(size_t challenge_size, [in, size=challenge_size] const char *challenge,
                                    size_t sk_size, [in, size=sk_size] const char *sk, size_t sig_size, [out, size=sig_size] char *sig);

        public int sgx_create_user([in, string] const char *username, [in, string] const char *pk_path, [in, string] const char *sk_path);
        public int sgx_add_user([in, string] const char *username, size_t pk_size, [in, size=pk_size] const char *pk);
        public int sgx_remove_user([in, string] const char *user_uuid);

        public int sgx_edit_user_entitlement([in, string] const char *path, unsigned char rights, [in, string] const char *user_uuid);

        public int sgx_ls_buffer_size([in, string] const char *path);
        public int sgx_readdir([in, string] const char *path, char separator, size_t buffer_size, [out, size=buffer_size] char *buffer);

        public int sgx_entry_type([in, string] const char *path);
        public int sgx_get_rights([in, string] const char *path);

        public int sgx_file_size([in, string] const char *filepath);
        public int sgx_create_file([in, string] const char *reason, [in, string] const char *filepath);
        public int sgx_read_file([in, string] const char *reason, [in, string] const char *filepath, long offset, size_t buffer_size, [out, size=buffer_size] char *buffer);
        public int sgx_write_file([in, string] const char *reason, [in, string] const char *filepath, long offset, size_t data_size, [in, size=data_size] const char *data);
        public int sgx_unlink([in, string] const char *reason, [in, string] const char *filepath);

        public int sgx_mkdir([in, string] const char *reason, [in, string] const char *dirpath);
        public int sgx_rmdir([in, string] const char *reason, [in, string] const char *dirpath);
        public int sgx_opendir([in, string] const char *dirpath);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print([in, string] const char *str);

        int ocall_dump([in, string] const char *path, size_t size, [in, size=size] const char *buffer);
        int ocall_dump_in_dir([in, string] const char *dir, [in, string] const char *file, size_t size, [in, size=size] const char *buffer);
        int ocall_dump_append_in_dir([in, string] const char *dir, [in, string] const char *file, size_t size, [in, size=size] const char *buffer);
        int ocall_dump_with_offset_in_dir([in, string] const char *dir, [in, string] const char *file, long offset, size_t size, [in, size=size] const char *buffer);

        int ocall_delete_from_dir([in, string] const char *dir, [in, string] const char *uuid);

        int ocall_file_size([in, string] const char *dir, [in, string] const char *uuid);
        int ocall_load_file([in, string] const char *dir, [in, string] const char *uuid, long offset, size_t size, [out, size=size] char *buffer);

        int ocall_sign_challenge([in, string] const char *sk_path, size_t nonce_size, [in, size=nonce_size] const char *nonce,
                                size_t sig_size, [out, size=sig_size] char *sig,
                                size_t e_supernode_size, [out, size=e_supernode_size] char *e_supernode) allow(sgx_sign_message);
    };
};
