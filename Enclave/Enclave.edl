enclave {
    from "Sealing/Sealing.edl" import *;

    trusted {
        /* define ECALLs here. */
        public int sgx_init_filesystem();
        public int sgx_init_existing_filesystem(size_t rk_sealed_size, [in, size=rk_sealed_size] const char *sealed_rk);
        public int sgx_destroy_filesystem(size_t rk_sealed_size, [out, size=rk_sealed_size] char *sealed_rk);

        public int sgx_ls_buffer_size();
        public int sgx_readdir(char separator, size_t buffer_size, [out, size=buffer_size] char *buffer);

        public int sgx_isfile([in, string] const char *filename);
        public int sgx_file_size([in, string] const char *filename);
        public int sgx_create_file([in, string] const char *filename);
        public int sgx_read_file([in, string] const char *filename, long offset, size_t buffer_size, [out, size=buffer_size] char *buffer);
        public int sgx_write_file([in, string] const char *filename, long offset, size_t data_size, [in, size=data_size] const char *data);
        public int sgx_unlink([in, string] const char *filename);

        public int sgx_metadata_size([in, string] const char *filename);
        public int sgx_dump_metadata([in, string] const char *filename, size_t buffer_size, [out, size=buffer_size] char *buffer);
        public int sgx_load_metadata([in, string] const char *filename, size_t buffer_size, [in, size=buffer_size] const char *buffer);

        public int sgx_encryption_size([in, string] const char *filename, long up_offset, size_t up_size);
        public int sgx_dump_encryption([in, string] const char *filename, long up_offset, size_t up_size, size_t buffer_size, [out, size=buffer_size] char *buffer);
        public int sgx_load_encryption([in, string] const char *filename, long offset, size_t buffer_size, [in, size=buffer_size] const char *buffer);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print([in, string] const char* str);
    };
};
